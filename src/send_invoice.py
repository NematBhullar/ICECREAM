"""
This file is for the send_invoice route
"""
from time import time
from typing import List, Tuple
from uuid import uuid4
from json import loads, JSONDecodeError
from werkzeug.exceptions import BadRequest
from src.auth import get_sender_from_request
from src.db_helpers import store_report

from .email import send_email
from .sms import send_sms

def send_invoice(request)->dict:
    """
    get the input from the request and send the invoice to recipients
    accordingly. Return the report in the end.

    Arguments:
        reqeust              - The request generated by the user
    
    Return Value:
        report (dictionary)  - A dictionary containaing the status, report id, 
                               and the actual content of the report (whether the
                               operation is successful, the reason the operation
                               fails etc.)
    """
    sender = get_sender_from_request(request)
    report_id = uuid4()

    # getting recipients
    recipients_str = get_form_data(request, 'recipients')
    try:
        recipients = loads(recipients_str)
    except JSONDecodeError as e:
        raise BadRequest("invalid json format") from e

    invoice = get_form_data(request, 'invoice')

    report_content = real_send_invoice(sender.username, recipients, invoice)
    report = {
        "status": "success",
        "report_id": str(report_id),
        "report": report_content
    }

    store_report(report_id, sender.username, report)
    return report


def real_send_invoice(sender: str, recipients: List[dict], invoice: str) ->(
    List[dict]):
    """
    Sends the invoice to the recipients and generate the report
    
    Arguments:
        sender (string)      - The sender's username
        recipients (list)    - A list of dictionaries, each dictionary 
                               containing the type and email address
        invoice (string)     - The UBL format of the invoice 

    Return Value:
        report (list)        - A list of dictionaries. In each dictionary, it
                                states whether the operation is succesful and 
                                the reason it fails if the operation is 
                                unsuccesful
    
    """
    report = []
    for recipient in recipients:
        sender_name = recipient.get('sender', sender)
        message = recipient.get('message')
        valid, result = validate_recipient(recipient)

        if valid:
            if recipient['type'] == 'email':
                result = {
                    **recipient,
                    **send_email(sender_name, recipient["to"], invoice, 
                        message),
                }
            elif recipient['type'] == 'sms':
                result = {
                    **recipient,
                    **send_sms(sender_name, recipient["to"], invoice)
                }
            else:
                result = {
                    "status": "fail",
                    **recipient,
                    "reason": "Sorry! We only support email for now.",
                }
        
        result["time"] = int(time())
        report.append(result)
    return report

def get_form_data(request, key: str) -> str:
    """
    get the form data with the given key
    
    Arguments:
        request             - the request object created by flask
        key (string)        - the key of the field in the form-data

    Return Value:
        value (string)      - the value of that field
    
    Exceptions:
        BadRequest          - when there is no such key in the form data

    """
    def read_file(file):
        return file.read() if file is not None else None
    
    val = request.form.get(key) or read_file(request.files.get(key))
    if val is None:
        raise BadRequest('cannot get the form-data from the request')
    return val


def validate_recipient(recipient: dict) -> Tuple[bool, dict]:
    """
    validate the recipient dict. If the dict does not contain 'type' or 'to'
    field, it returns False and a corresponding dict. The 'status' field in the 
    result dict is 'fail'. Otherwise, it returns True and a empty dict.

    Arguemnts:
        recipient (dict)       - a recipient object from the request
    
    Return Value:
        valid (bool)           - whether the recipient object is valid or not
        response (dict)        - a response of that specify the status and 
                                reason if the recipient object is invalidate. 
                                Otherwise, it is an empty dict.

    """
    if 'type' not in recipient:
        return False, {
            'status': 'fail',
            'reason': 'Please specify the method you want to send the invoice.'
        }
    if 'to' not in recipient:
        return False, {
            'status': 'fail',
            'reason': 'Please specify the recipient in the "to" field.'
        }
    return True, {}
